Properties = setmetatable({
	Default = setmetatable({},{
		__index = function(self,index)
			local gelf, ret = getmetatable(self)
			gelf.__index = {}
			for i,v in next, {
				set = function(ClassName, Properties, Z) --If the Z is higher it overlaps the Zs lower
					if not self[Z or 0] then self[Z or 0] = {} end
					self[Z or 0][ClassName] = Properties
				end;
				get = function(ClassName, Z)
					local props = {}
					local function checkAndGet(i,v)
						if pcall(function() return Instance.new(ClassName):IsA(i) end) or i == ClassName then
							for i,v in next, v do
								props[i] = v
							end
						end						
					end
					if Z then
						for i,v in next, self[Z] do
							checkAndGet(i,v)
						end
					else
						for i,v in next, self do
							for i,v in next, v do
								checkAndGet(i,v)
							end
						end
					end
					return props
				end;
				toDefaultProperties = function(Object,Z)
					local props = self.get(Object.ClassName,Z)
					for i,v in next, props do
						Object[i] = v
					end
				end;
			} do
				gelf.__index[i] = v
				if i == index then ret = v end
			end
			return ret
		end
	});
	Custom = setmetatable({},{
		__index = function(self,index)
			getmetatable(self).__index = {}
			getmetatable(self).__index.new = function(Name, Function, ...) --... Classes that can use this property
				self[Name] = setmetatable({Function = Function,Classes = {...}},{
					__index = function(self, Object)
						local class = self.Classes
						if #class == 0 then
							return true
						end
						for i,ClassName in next, class do
							if Object:IsA(ClassName) or ClassName == 'all' then
								return true
							end
						end
						return false
					end;
					__call = function(self,Object,...)
						if self[Object] then
							self.Function(Object,...)
						end
					end;
				})
			end
			if index == 'new' then return getmetatable(self).__index.new end
		end
	});
	RobloxAPI = setmetatable({"C0","C1","F0","F1","F2","F3","Hit","hit","Mix","Sit","Axes","Axis","Drag","Duty","Face","Font","Grip","Heat","Icon","Jump","Line","Loop","Name","Port","Rate","SIMD","size","Size","Text","Time","Tone","Angle","Coils","Color","Delay","Delta","Depth","Faces","focus","Focus","Force","force","Genre","Guest","Image","InOut","InUse","JobId","Level","Modal","OsVer","Pitch","Point","Range","Ratio","Scale","Score","Shape","Shiny","Speed","Steer","Style","Title","TurnD","TurnP","Value","Active","Attack","CFrame","cframe","Color3","FaceId","FogEnd","GameId","GripUp","Health","Height","Length","Locked","Looped","MeshId","Octave","Offset","Origin","Radius","Source","Spread","Status","Ticket","Torque","userId","UserId","Volume","Weight","Width0","Width1","ZIndex","Ambient","BaseUrl","BinType","Damping","Density","Enabled","GcLimit","GcPause","GfxCard","Graphic","Gravity","GripPos","KeyCode","LowGain","MaxSize","MidGain","MinSize","Neutral","Opacity","Padding","PlaceId","Playing","Purpose","Release","RigType","Shadows","SoundId","summary","Texture","ThrustD","ThrustP","Timeout","ToolTip","UnitRay","Version","Visible","ZOffset","ActionId","Anchored","Animated","AutoRuns","BodyPart","CellSize","ChatMode","Circular","Contrast","DataCost","Disabled","DryLevel","Duration","Feedback","FogColor","FogStart","FontSize","Friction","GridSize","HighGain","IsLoaded","IsPaused","IsSmooth","JobCount","Lifetime","LocaleId","Localize","location","Location","Material","maxForce","MaxForce","MaxItems","MaxSpeed","MaxValue","MeshType","MidImage","MinValue","Outlines","position","Position","Priority","Rotation","RotSpeed","Segments","Selected","SkyboxBk","SkyboxDn","SkyboxFt","SkyboxLf","SkyboxRt","SkyboxUp","Specular","TextFits","TextSize","TextWrap","Throttle","TileSize","TopImage","UseCSGv2","Velocity","velocity","VRDevice","WetLevel","BaseAngle","Browsable","ClassName","className","ClockTime","Condition","CreatorId","DataModel","DataReady","DecayTime","Diffusion","Draggable","EnableFRM","Frequency","GcStepMul","GripRight","HeadColor","HeadScale","HipHeight","Intensity","IsBackend","IsEnabled","IsPlaying","isPlaying","IsWindows","JumpPower","LeftRight","Magnitude","MajorAxis","maxHealth","MaxHealth","MaxLength","MaxThrust","MaxTorque","maxTorque","MinLength","MultiLine","OsIs64Bit","PackageId","PrintBits","ScaleType","SkinColor","SortOrder","StarCount","StatusTip","Stiffness","TeamColor","TestCount","TextColor","TextureId","TextureID","Thickness","Threshold","TimeOfDay","TintColor","TopBottom","TopParamA","TopParamB","Transform","TurnSpeed","TweenInfo","TweenTime","UIMaximum","UIMinimum","VersionId","ViewSizeX","ViewSizeY","VREnabled","WalkSpeed","WarnCount","WorldAxis","AccountAge","AllowSleep","Archivable","archivable","AspectType","AutoRotate","BackParamA","BackParamB","brickColor","BrickColor","Brightness","BubbleChat","CameraMode","CameraType","CanCollide","CanvasSize","ColorShift","Constraint","CursorIcon","CurveSize0","CurveSize1","DataGCRate","Deprecated","Elasticity","ErrorCount","Expression","FaceCamera","formFactor","FormFactor","FreeLength","Fullscreen","GainMakeup","HeadColor3","HeadLocked","HoverImage","Insertable","IsFinished","LeftParamA","LeftParamB","LineHeight","LowerAngle","LowerLimit","MaskWeight","MaxExtents","MaxPlayers","MenuIsOpen","NavBarSize","NearPlaneZ","NumPlayers","numPlayers","OsPlatform","PaddingTop","ReceiveAge","RelativeTo","Saturation","Selectable","ShouldSkip","SizeOffset","SteerFloat","Teleported","TextBounds","TextColor3","TextScaled","TimeLength","TopSurface","TorsoColor","UINumTicks","UpperAngle","UpperLimit","UserDialog","WaterColor","WidthScale","WireRadius","AlwaysOnTop","AnchorPoint","AnimationId","AspectRatio","BackSurface","BlastRadius","BorderColor","BottomImage","CellPadding","ChatHistory","ChatVisible","ClassicChat","ControlMode","CreatorType","CurrentLine","CycleOffset","Description","DisplayName","EasingStyle","EmitterSize","EmptyCutoff","FieldOfView","FrontParamA","FrontParamB","GcFrequency","GripForward","HttpEnabled","ImageColor3","IsDebugging","IsTreeShown","LayoutOrder","LeftSurface","LuaRamLimit","MaxDistance","MaxTextSize","MaxVelocity","MinDistance","MinTextSize","Orientation","PaddingLeft","PlayerCount","PrintEvents","ReceiveRate","Reflectance","Restitution","RightParamA","RightParamB","RollOffMode","RotVelocity","ShadowColor","SizeInCells","SliceCenter","SpreadAngle","StartCorner","StudsOffset","TargetAngle","TargetPoint","TextureMode","TextureSize","TextWrapped","TorsoColor3","VertexColor","VideoMemory","VIPServerId","WalkToPoint","WorldCFrame","AbsoluteSize","Acceleration","ActuatorType","AngularSpeed","AttachmentUp","AutoFRMLevel","AutoLocalize","BehaviorType","BorderColor3","BottomParamA","BottomParamB","CameraOffset","CanBeDropped","CenterOfMass","CurrentAngle","DataSendKbps","DataSendRate","DesiredAngle","DisableCSGv2","DisplayOrder","DominantAxis","DopplerScale","FollowUserId","FrontSurface","GraphicsMode","LeftArmColor","LeftLegColor","LinkedSource","LockedToPart","MasterVolume","ModalEnabled","MouseEnabled","OsPlatformId","PaddingRight","PlaceVersion","PlayOnRemove","PressedImage","PrintFilters","PrintTouches","QualityLevel","ReloadAssets","ResetOnSpawn","RightSurface","RiseVelocity","RobloxLocked","RolloffScale","RotationType","SparkleColor","StickyWheels","SunTextureId","SurfaceColor","TargetOffset","TargetRadius","TeleportedIn","TextTruncate","TextureSpeed","TimePosition","TouchEnabled","Transparency","UsePartColor","VideoQuality","ViewportSize","VRDeviceName","WeightTarget","AmbientReverb","AttachmentPos","BaseTextureId","BlastPressure","BottomBarSize","BottomSurface","CartoonFactor","ClassCategory","ContactsCount","CurrentLength","DataMtuAdjust","ExplorerOrder","ExplosionType","ExtentsOffset","FillDirection","FloorMaterial","GlobalShadows","GoodbyeDialog","HardwareMouse","HasEverUsedVR","ImageRectSize","InitialPrompt","InstanceCount","IsModalDialog","LeftArmColor3","LeftLegColor3","LightEmission","LimitsEnabled","LineThickness","LocalizedText","MaxSlopeAngle","MeshCacheSize","MoonTextureId","MotorMaxForce","MouseBehavior","MoveDirection","NameOcclusion","PaddingBottom","PantsTemplate","PlatformStand","PlaybackSpeed","PlaybackState","RightArmColor","RightLegColor","RobloxVersion","SchedulerRate","ScriptContext","SecondaryAxis","ServoMaxForce","ShirtTemplate","SoftwareSound","StatusBarSize","StudsPerTileU","StudsPerTileV","SurfaceColor3","TargetSurface","TextureLength","ThrottleFloat","TouchSendRate","TriangleCount","TriggerOffset","UserInputType","WaterWaveSize","WeightCurrent","WorldPosition","WorldRotation","AreOwnersShown","AutoAssignable","AutomaticRetry","CanvasPosition","DataComplexity","DistanceFactor","ErrorReporting","GamepadEnabled","HeadsUpDisplay","IgnoreGuiInset","IsSleepAllowed","LightInfluence","MembershipType","MotorMaxTorque","OutdoorAmbient","PrintInstances","RequiresHandle","ResponseDialog","Responsiveness","RightArmColor3","RightLegColor3","RobloxLocaleId","SecondaryColor","ServoMaxTorque","SizeConstraint","SourceLocaleId","SunAngularSize","SystemLocaleId","TargetPosition","TextXAlignment","TextYAlignment","ThreadPoolSize","TrackDataTypes","UserHeadCFrame","UserInputState","VelocitySpread","WaterWaveSpeed","ZIndexBehavior","angularvelocity","AngularVelocity","AreAnchorsShown","AreRegionsShown","AttachmentPoint","AttachmentRight","AutoButtonColor","AutoJumpEnabled","BackgroundColor","BorderSizePixel","CameraYInverted","CoordinateFrame","CurrentDistance","CurrentPosition","DataReceiveKbps","DefaultWaitTime","EasingDirection","EditingDisabled","ElasticBehavior","ExtraMemoryUsed","HeartbeatTimeMs","ImageRectOffset","IsSFFlagsLoaded","KeyboardEnabled","LoadDefaultChat","MoonAngularSize","NumberOfPlayers","OnTopOfCoreBlur","PhysicsSendKbps","PhysicsSendRate","PlaceholderText","PreferredParent","PrimaryAxisOnly","PrimitivesCount","PrintProperties","ResizeableFaces","ResizeIncrement","RigidityEnabled","ScriptsDisabled","ShowNativeInput","SpecificGravity","TopSurfaceInput","TriggerDistance","TwistLowerAngle","TwistUpperAngle","AbsolutePosition","AbsoluteRotation","BackgroundColor3","BackSurfaceInput","ChatScrollLength","ClearTextOnFocus","ClipsDescendants","CollisionEnabled","CollisionGroupId","ComparisonMethod","ConstrainedValue","DataSendPriority","DebuggingEnabled","EditQualityLevel","FilteringEnabled","FrameRateManager","FreeMemoryMBytes","GearGenreSetting","GyroscopeEnabled","InclinationAngle","InverseSquareLaw","IsLuaChatEnabled","LeftSurfaceInput","MouseIconEnabled","MouseSensitivity","NetworkOwnerRate","OverlayTextureId","PhysicsMtuAdjust","PlaybackLoudness","PreferredParents","PreferredPlayers","ProcessUserInput","RequestQueueSize","ScrollingEnabled","SimulationRadius","StreamingEnabled","TextStrokeColor3","TextTransparency","ThreadPoolConfig","VIPServerOwnerId","WaterReflectance","WorldOrientation","AppearanceDidLoad","AreBodyTypesShown","AreHingesDetected","AttachmentForward","EmissionDirection","FrontSurfaceInput","HealthDisplayType","ImageTransparency","IsReceiveAgeShown","PhysicsStepTimeMs","PlaceholderColor3","PrintSplitMessage","RightSurfaceInput","RobloxProductName","SavedQualityLevel","ScreenOrientation","ShowBoundingBoxes","SystemProductName","TouchInputEnabled","TouchMovementMode","VerticalAlignment","WaterTransparency","WorldRotationAxis","AbsoluteWindowSize","AdditionalLuaState","AngularRestitution","AreAssembliesShown","AreMechanismsShown","ArePartCoordsShown","BottomSurfaceInput","BubbleChatLifetime","CharacterAutoLoads","DevEnableMouseLock","DevTouchCameraMode","EagerBulkExecution","ExplorerImageIndex","FillEmptySpaceRows","GeographicLatitude","GuiInputUserCFrame","LegacyNamingScheme","ManualFocusRelease","MaxAngularVelocity","MaxCollisionSounds","MaxPlayersInternal","OverlayNativeInput","PhysicsReceiveKbps","PrintPhysicsErrors","SchedulerDutyCycle","ScrollBarThickness","ScrollingDirection","ShowDevelopmentGui","SimulateSecondsLag","SizeRelativeOffset","ThrottleAdjustTime","TwistLimitsEnabled","WorldSecondaryAxis","AbsoluteContentSize","AngularActuatorType","ApplyAtCenterOfMass","AreModelCoordsShown","AreWorldCoordsShown","AutoColorCharacters","CharacterAppearance","DataComplexityLimit","DevelopmentLanguage","DisplayDistanceType","DistributedGameTime","GamepadInputEnabled","GoodbyeChoiceActive","HorizontalAlignment","NameDisplayDistance","PhysicsSendPriority","PreferredClientPort","ReportSoundWarnings","RotationAxisVisible","SurfaceTransparency","TrackPhysicsDetails","UsedHideHudShortcut","VelocityInheritance","VideoCaptureEnabled","VRRotationIntensity","AccelerometerEnabled","AllowThirdPartySales","AllTutorialsDisabled","AngularLimitsEnabled","AutoSelectGuiEnabled","BubbleChatMaxBubbles","CelestialBodiesShown","CollisionSoundVolume","ComputerMovementMode","ConversationDistance","CustomizedTeleportUI","DevTouchMovementMode","ExecuteWithStudioRun","GazeSelectionEnabled","GuiNavigationEnabled","IsLuaHomePageEnabled","IsQueueErrorComputed","IsTextScraperRunning","ManualActivationOnly","MotorMaxAcceleration","OnboardingsCompleted","OnScreenKeyboardSize","ReactionForceEnabled","ScrollBarImageColor3","StudsBetweenTextures","WaitingThreadsBudget","AllowCustomAnimations","AllowInsertFreeModels","AreContactPointsShown","CameraMaxZoomDistance","CameraMinZoomDistance","CharacterAppearanceId","ClientPhysicsSendRate","CollisionSoundEnabled","DevComputerCameraMode","EnableMouseLockOption","ExportMergeByMaterial","FillDirectionMaxCells","FillEmptySpaceColumns","HealthDisplayDistance","HostWidgetWasRestored","IsLuaGamesPageEnabled","MaxActivationDistance","MouseDeltaSensitivity","MovingPrimitivesCount","OverrideStarterScript","ReactionTorqueEnabled","RenderStreamedRegions","ResetPlayerGuiOnSpawn","StudsOffsetWorldSpace","UsePhysicsPacketCache","AllowTeamChangeOnTouch","AreContactIslandsShown","AreUnalignedPartsShown","BackgroundTransparency","DevCameraOcclusionMode","Is30FpsThrottleEnabled","IsFmodProfilingEnabled","IsUsingCameraYInverted","PhysicsAnalyzerEnabled","ReportAbuseChatHistory","TextStrokeTransparency","UseInstancePacketCache","VerticalScrollBarInset","AreScriptStartsReported","AutomaticScalingEnabled","ComparisonDiffThreshold","ComparisonPsnrThreshold","DevComputerMovementMode","ExtentsOffsetWorldSpace","IncommingReplicationLag","LoadCharacterAppearance","MaximumSimulationRadius","OnScreenKeyboardVisible","OnScreenProfilerEnabled","PerformanceStatsVisible","RenderCSGTrianglesDebug","RespectFilteringEnabled","ScrollWheelInputEnabled","TouchCameraMovementMode","AreAwakePartsHighlighted","AreJointCoordinatesShown","CoreGuiNavigationEnabled","CurrentScreenOrientation","CustomPhysicalProperties","FallenPartsDestroyHeight","GamepadCameraSensitivity","HorizontalScrollBarInset","LegacyInputEventsEnabled","MicroProfilerWebServerIP","OnScreenKeyboardPosition","PreferredPlayersInternal","PrintStreamInstanceQuota","ShowActiveAnimationAsset","TickCountPreciseOverride","ToolPunchThroughDistance","AdditionalCoreIncludeDirs","DestroyJointRadiusPercent","ForcePlayModeGameLocaleId","LocalTransparencyModifier","OverrideMouseIconBehavior","ShowDecompositionGeometry","VerticalScrollBarPosition","CanLoadCharacterAppearance","ComputerCameraMovementMode","DevTouchCameraMovementMode","MicroProfilerWebServerPort","ScrollBarImageTransparency","UsedCoreGuiIsVisibleToggle","ClickableWhenViewportHidden","ForcePlayModeRobloxLocaleId","IsScriptStackTracingEnabled","MotorMaxAngularAcceleration","MouseSensitivityFirstPerson","MouseSensitivityThirdPerson","ArePhysicsRejectionsReported","PhysicsEnvironmentalThrottle","UsedCustomGuiIsVisibleToggle","DevComputerCameraMovementMode","MicroProfilerWebServerEnabled","IsPhysicsEnvironmentalThrottled","IsUsingGamepadCameraSensitivity","RobloxForcePlayModeGameLocaleId","OnScreenKeyboardAnimationDuration","RobloxForcePlayModeRobloxLocaleId","TemporaryLegacyPhysicsSolverOverride"}
		,{
		FullAPI = setmetatable({},{__index = function(self, index) local gelf, ret = getmetatable(self) gelf.__index = {} for i,v in next, {
			ShirtGraphic = setmetatable({'Graphic'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CharacterAppearance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LocalizationTable = setmetatable({'DevelopmentLanguage', 'SourceLocaleId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PluginGuiService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PluginMouse = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Mouse(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StarterGui = setmetatable({'ProcessUserInput', 'ResetPlayerGuiOnSpawn', 'ScreenOrientation', 'ShowDevelopmentGui'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePlayerGui(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Accoutrement = setmetatable({'AttachmentForward', 'AttachmentPoint', 'AttachmentPos', 'AttachmentRight', 'AttachmentUp'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AdService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DebuggerManager = setmetatable({'DebuggingEnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CharacterAppearance = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiMain = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ScreenGui(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); VectorForce = setmetatable({'ApplyAtCenterOfMass', 'Force', 'RelativeTo'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SelectionLasso = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase3d(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HumanoidController = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Controller(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); MeshContentProvider = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CacheableContentProvider(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Handles = setmetatable({'Faces', 'Style'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandlesBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataClasses = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RemoteEvent = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ValueBase = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Hole = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Feature(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Smoke = setmetatable({'Color', 'Enabled', 'Opacity', 'RiseVelocity', 'Size'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			KeyframeSequenceProvider = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CSGDictionaryService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.FlyweightService(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			UIScale = setmetatable({'Scale'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIComponent(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TimerService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CFrameValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); InputObject = setmetatable({'Delta', 'KeyCode', 'Position', 'UserInputState', 'UserInputType'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ImageLabel = setmetatable({'Image', 'ImageColor3', 'ImageRectOffset', 'ImageRectSize', 'ImageTransparency', 'IsLoaded', 'ScaleType', 'SliceCenter', 'TileSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiLabel(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			NotificationService = setmetatable({'IsLuaChatEnabled', 'IsLuaGamesPageEnabled', 'IsLuaHomePageEnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIListLayout = setmetatable({'Padding'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIGridStyleLayout(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Torque = setmetatable({'RelativeTo', 'Torque'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HandleAdornment = setmetatable({'AlwaysOnTop', 'CFrame', 'SizeRelativeOffset', 'ZIndex'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PVAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PointLight = setmetatable({'Range'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Light(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TweenBase = setmetatable({'PlaybackState'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DoubleConstrainedValue = setmetatable({'ConstrainedValue', 'MaxValue', 'MinValue', 'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RocketPropulsion = setmetatable({'CartoonFactor', 'MaxSpeed', 'MaxThrust', 'MaxTorque', 'TargetOffset', 'TargetRadius', 'ThrustD', 'ThrustP', 'TurnD', 'TurnP'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CoreGui = setmetatable({'Version'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePlayerGui(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataEvents = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReplicatedFirst = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SpotLight = setmetatable({'Angle', 'Face', 'Range'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Light(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ButtonBindingWidget = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NegateOperation = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PartOperation(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ChorusSoundEffect = setmetatable({'Depth', 'Mix', 'Rate'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Tool = setmetatable({'CanBeDropped', 'Enabled', 'Grip', 'GripForward', 'GripPos', 'GripRight', 'GripUp', 'ManualActivationOnly', 'RequiresHandle', 'ToolTip'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BackpackItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Texture = setmetatable({'StudsPerTileU', 'StudsPerTileV'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Decal(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PhysicsSettings = setmetatable({'AllowSleep', 'AreAnchorsShown', 'AreAssembliesShown', 'AreAwakePartsHighlighted', 'AreBodyTypesShown', 'AreContactIslandsShown', 'AreContactPointsShown', 'AreJointCoordinatesShown', 'AreMechanismsShown', 'AreModelCoordsShown', 'AreOwnersShown', 'ArePartCoordsShown', 'AreRegionsShown', 'AreUnalignedPartsShown', 'AreWorldCoordsShown', 'DisableCSGv2', 'IsReceiveAgeShown', 'IsTreeShown', 'PhysicsAnalyzerEnabled', 'PhysicsEnvironmentalThrottle', 'ShowDecompositionGeometry', 'ThrottleAdjustTime', 'UseCSGv2'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Script = setmetatable({'Source'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BaseScript(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Terrain = setmetatable({'IsSmooth', 'MaxExtents', 'WaterColor', 'WaterReflectance', 'WaterTransparency', 'WaterWaveSize', 'WaterWaveSpeed'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end});
			OrderedDataStore = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GlobalDataStore(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LineHandleAdornment = setmetatable({'Length', 'Thickness'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandleAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RenderingTest = setmetatable({'CFrame', 'ComparisonDiffThreshold', 'ComparisonMethod', 'ComparisonPsnrThreshold', 'Description', 'FieldOfView', 'Orientation', 'Position', 'QualityLevel', 'ShouldSkip', 'Ticket'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			PVAdornment = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase3d(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TextBox = setmetatable({'ClearTextOnFocus', 'Font', 'FontSize', 'LineHeight', 'ManualFocusRelease', 'MultiLine', 'OverlayNativeInput', 'PlaceholderColor3', 'PlaceholderText', 'ShowNativeInput', 'Text', 'TextBounds', 'TextColor', 'TextColor3', 'TextFits', 'TextScaled', 'TextSize', 'TextStrokeColor3', 'TextStrokeTransparency', 'TextTransparency', 'TextTruncate', 'TextWrap', 'TextWrapped', 'TextXAlignment', 'TextYAlignment'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiObject(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); KeyframeSequence = setmetatable({'Loop', 'Priority'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FunctionalTest = setmetatable({'Description'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ServerScriptService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BillboardGui = setmetatable({'Active', 'AlwaysOnTop', 'ClipsDescendants', 'ExtentsOffset', 'ExtentsOffsetWorldSpace', 'LightInfluence', 'MaxDistance', 'Size', 'SizeOffset', 'StudsOffset', 'StudsOffsetWorldSpace'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.LayerCollector(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Feature = setmetatable({'FaceId', 'InOut', 'LeftRight', 'TopBottom'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); MarketplaceService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Team = setmetatable({'AutoAssignable', 'AutoColorCharacters', 'Score', 'TeamColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FlangeSoundEffect = setmetatable({'Depth', 'Mix', 'Rate'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); MouseService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiButton = setmetatable({'AutoButtonColor', 'Modal', 'Selected', 'Style'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiObject(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIGridStyleLayout = setmetatable({'AbsoluteContentSize', 'FillDirection', 'HorizontalAlignment', 'SortOrder', 'VerticalAlignment'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UILayout(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); JointsService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NetworkPeer = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UITextSizeConstraint = setmetatable({'MaxTextSize', 'MinTextSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIConstraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AdvancedDragger = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadata = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PointsService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end});
			GuiBase = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyGyro = setmetatable({'CFrame', 'D', 'MaxTorque', 'P'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Path = setmetatable({'Status'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiLabel = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiObject(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SpecialMesh = setmetatable({'MeshType'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.FileMesh(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); InstancePacketCache = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Folder = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			FileMesh = setmetatable({'MeshId', 'TextureId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.DataModelMesh(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Shirt = setmetatable({'ShirtTemplate'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Clothing(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SlidingBallConstraint = setmetatable({'ActuatorType', 'CurrentPosition', 'LimitsEnabled', 'LowerLimit', 'MotorMaxAcceleration', 'MotorMaxForce', 'Restitution', 'ServoMaxForce', 'Size', 'Speed', 'TargetPosition', 'UpperLimit', 'Velocity'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Animator = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GlobalDataStore = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SolidModelContentProvider = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CacheableContentProvider(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SkateboardPlatform = setmetatable({'Steer', 'StickyWheels', 'Throttle'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Part(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DebuggerWatch = setmetatable({'Expression'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DataModelMesh = setmetatable({'Offset', 'Scale', 'VertexColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SkateboardController = setmetatable({'Steer', 'Throttle'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Controller(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TextLabel = setmetatable({'Font', 'FontSize', 'LineHeight', 'LocalizedText', 'Text', 'TextBounds', 'TextColor', 'TextColor3', 'TextFits', 'TextScaled', 'TextSize', 'TextStrokeColor3', 'TextStrokeTransparency', 'TextTransparency', 'TextTruncate', 'TextWrap', 'TextWrapped', 'TextXAlignment', 'TextYAlignment'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiLabel(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Mouse = setmetatable({'Hit', 'Icon', 'Origin', 'TargetSurface', 'UnitRay', 'ViewSizeX', 'ViewSizeY', 'X', 'Y'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Constraint = setmetatable({'Color', 'Enabled', 'Visible'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BindableFunction = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataCallbacks = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ImageHandleAdornment = setmetatable({'Image', 'Size'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandleAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Clothing = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CharacterAppearance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Lighting = setmetatable({'Ambient', 'Brightness', 'ClockTime', 'ColorShift', 'ColorShift', 'FogColor', 'FogEnd', 'FogStart', 'GeographicLatitude', 'GlobalShadows', 'OutdoorAmbient', 'Outlines', 'ShadowColor', 'TimeOfDay'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RenderSettings = setmetatable({'AutoFRMLevel', 'EagerBulkExecution', 'EditQualityLevel', 'EnableFRM', 'ExportMergeByMaterial', 'FrameRateManager', 'GraphicsMode', 'MeshCacheSize', 'QualityLevel', 'ReloadAssets', 'RenderCSGTrianglesDebug', 'ShowBoundingBoxes'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ObjectValue = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			CharacterMesh = setmetatable({'BaseTextureId', 'BodyPart', 'MeshId', 'OverlayTextureId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CharacterAppearance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuidRegistryService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GameSettings = setmetatable({'AdditionalCoreIncludeDirs', 'BubbleChatLifetime', 'BubbleChatMaxBubbles', 'ChatHistory', 'ChatScrollLength', 'CollisionSoundEnabled', 'CollisionSoundVolume', 'HardwareMouse', 'MaxCollisionSounds', 'OverrideStarterScript', 'ReportAbuseChatHistory', 'SoftwareSound', 'VideoCaptureEnabled', 'VideoQuality'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TotalCountTimeIntervalItem = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.StatsItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataEnum = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ReflectionMetadataItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			HandlesBase = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PartAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FaceInstance = setmetatable({'Face'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Toolbar = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyColors = setmetatable({'HeadColor', 'HeadColor3', 'LeftArmColor', 'LeftArmColor3', 'LeftLegColor', 'LeftLegColor3', 'RightArmColor', 'RightArmColor3', 'RightLegColor', 'RightLegColor3', 'TorsoColor', 'TorsoColor3'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CharacterAppearance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FriendService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ColorCorrectionEffect = setmetatable({'Brightness', 'Contrast', 'Saturation', 'TintColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PostEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CookiesService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RopeConstraint = setmetatable({'CurrentDistance', 'Length', 'Restitution', 'Thickness'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PVInstance = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SelectionBox = setmetatable({'LineThickness', 'SurfaceColor', 'SurfaceColor3', 'SurfaceTransparency'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PVAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); VehicleSeat = setmetatable({'AreHingesDetected', 'Disabled', 'HeadsUpDisplay', 'MaxSpeed', 'Steer', 'SteerFloat', 'Throttle', 'ThrottleFloat', 'Torque', 'TurnSpeed'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DebugSettings = setmetatable({'DataModel', 'ErrorReporting', 'GfxCard', 'InstanceCount', 'IsFmodProfilingEnabled', 'IsScriptStackTracingEnabled', 'JobCount', 'LuaRamLimit', 'OsIs64Bit', 'OsPlatform', 'OsPlatformId', 'OsVer', 'PlayerCount', 'ReportSoundWarnings', 'RobloxProductName', 'RobloxVersion', 'SIMD', 'SystemProductName', 'TickCountPreciseOverride', 'VideoMemory'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ServerStorage = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); IntValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FloorWire = setmetatable({'CycleOffset', 'StudsBetweenTextures', 'Texture', 'TextureSize', 'Velocity', 'WireRadius'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase3d(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiRoot = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Controller = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Motor = setmetatable({'CurrentAngle', 'DesiredAngle', 'MaxVelocity'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Glue = setmetatable({'F0', 'F1', 'F2', 'F3'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIGridLayout = setmetatable({'CellPadding', 'CellSize', 'FillDirectionMaxCells', 'StartCorner'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIGridStyleLayout(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			LayerCollector = setmetatable({'Enabled', 'ResetOnSpawn', 'ZIndexBehavior'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase2d(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GlobalSettings = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GenericSettings(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Geometry = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ManualWeld = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ManualSurfaceJointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SoundGroup = setmetatable({'Volume'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiObject = setmetatable({'Active', 'AnchorPoint', 'BackgroundColor', 'BackgroundColor3', 'BackgroundTransparency', 'BorderColor', 'BorderColor3', 'BorderSizePixel', 'ClipsDescendants', 'Draggable', 'LayoutOrder', 'Position', 'Rotation', 'Selectable', 'Size', 'SizeConstraint', 'Transparency', 'Visible', 'ZIndex'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase2d(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DebuggerBreakpoint = setmetatable({'Condition', 'IsEnabled', 'Line'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SunRaysEffect = setmetatable({'Intensity', 'Spread'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PostEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			CorePackages = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Status = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Model(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Pose = setmetatable({'CFrame', 'EasingDirection', 'EasingStyle', 'MaskWeight', 'Weight'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PlayerMouse = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Mouse(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AnimationTrack = setmetatable({'IsPlaying', 'Length', 'Looped', 'Priority', 'Speed', 'TimePosition', 'WeightCurrent', 'WeightTarget'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AnalyticsService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LogService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AlignPosition = setmetatable({'ApplyAtCenterOfMass', 'MaxForce', 'MaxVelocity', 'ReactionForceEnabled', 'Responsiveness', 'RigidityEnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); InsertService = setmetatable({'AllowInsertFreeModels'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HingeConstraint = setmetatable({'ActuatorType', 'AngularSpeed', 'AngularVelocity', 'CurrentAngle', 'LimitsEnabled', 'LowerAngle', 'MotorMaxAcceleration', 'MotorMaxTorque', 'Radius', 'Restitution', 'ServoMaxTorque', 'TargetAngle', 'UpperAngle'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Message = setmetatable({'Text'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Player = setmetatable({'AccountAge', 'AppearanceDidLoad', 'AutoJumpEnabled', 'CameraMaxZoomDistance', 'CameraMinZoomDistance', 'CameraMode', 'CanLoadCharacterAppearance', 'CharacterAppearance', 'CharacterAppearanceId', 'ChatMode', 'DataComplexity', 'DataComplexityLimit', 'DataReady', 'DevCameraOcclusionMode', 'DevComputerCameraMode', 'DevComputerMovementMode', 'DevEnableMouseLock', 'DevTouchCameraMode', 'DevTouchMovementMode', 'DisplayName', 'FollowUserId', 'Guest', 'HealthDisplayDistance', 'LocaleId', 'MaximumSimulationRadius', 'MembershipType', 'NameDisplayDistance', 'Neutral', 'OsPlatform', 'SimulationRadius', 'TeamColor', 'Teleported', 'TeleportedIn', 'UserId', 'VRDevice'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ContentProvider = setmetatable({'BaseUrl', 'RequestQueueSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BoxHandleAdornment = setmetatable({'Size'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandleAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ScrollingFrame = setmetatable({'AbsoluteWindowSize', 'BottomImage', 'CanvasPosition', 'CanvasSize', 'ElasticBehavior', 'HorizontalScrollBarInset', 'MidImage', 'ScrollBarImageColor3', 'ScrollBarImageTransparency', 'ScrollBarThickness', 'ScrollingDirection', 'ScrollingEnabled', 'TopImage', 'VerticalScrollBarInset', 'VerticalScrollBarPosition'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiObject(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ManualSurfaceJointInstance = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Humanoid = setmetatable({'AutoJumpEnabled', 'AutoRotate', 'AutomaticScalingEnabled', 'CameraOffset', 'DisplayDistanceType', 'FloorMaterial', 'Health', 'HealthDisplayDistance', 'HealthDisplayType', 'HipHeight', 'Jump', 'JumpPower', 'MaxHealth', 'MaxSlopeAngle', 'MoveDirection', 'NameDisplayDistance', 'NameOcclusion', 'PlatformStand', 'RigType', 'Sit', 'TargetPoint', 'WalkSpeed', 'WalkToPoint'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); MeshPart = setmetatable({'MeshId', 'TextureID'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CylinderHandleAdornment = setmetatable({'Height', 'Radius'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandleAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end});
			PhysicsPacketCache = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RunningAverageItemDouble = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.StatsItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BloomEffect = setmetatable({'Intensity', 'Size', 'Threshold'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PostEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Attachment = setmetatable({'Axis', 'CFrame', 'Orientation', 'Position', 'Rotation', 'SecondaryAxis', 'Visible', 'WorldAxis', 'WorldCFrame', 'WorldOrientation', 'WorldPosition', 'WorldRotation', 'WorldSecondaryAxis'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Light = setmetatable({'Brightness', 'Color', 'Enabled', 'Shadows'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RobloxReplicatedStorage = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyMover = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AssetService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); WedgePart = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.FormFactorPart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ScriptService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ImageButton = setmetatable({'HoverImage', 'Image', 'ImageColor3', 'ImageRectOffset', 'ImageRectSize', 'ImageTransparency', 'IsLoaded', 'PressedImage', 'ScaleType', 'SliceCenter', 'TileSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiButton(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HapticService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiBase2d = setmetatable({'AbsolutePosition', 'AbsoluteRotation', 'AbsoluteSize', 'AutoLocalize', 'Localize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DialogChoice = setmetatable({'GoodbyeChoiceActive', 'GoodbyeDialog', 'ResponseDialog', 'UserDialog'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NumberValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); JointInstance = setmetatable({'C0', 'C1'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CylindricalConstraint = setmetatable({'AngularActuatorType', 'AngularLimitsEnabled', 'AngularRestitution', 'AngularSpeed', 'AngularVelocity', 'CurrentAngle', 'InclinationAngle', 'LowerAngle', 'MotorMaxAngularAcceleration', 'MotorMaxTorque', 'RotationAxisVisible', 'ServoMaxTorque', 'TargetAngle', 'UpperAngle', 'WorldRotationAxis'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SlidingBallConstraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); WeldConstraint = setmetatable({'Enabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CollectionService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Visit = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Configuration = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			VirtualUser = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); VirtualInputManager = setmetatable({'AdditionalLuaState'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Accessory = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Accoutrement(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end});
			SelectionPointLasso = setmetatable({'Point'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SelectionLasso(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Skin = setmetatable({'SkinColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.CharacterAppearance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			GamePassService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Vector3Value = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StringValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIBase = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); IntConstrainedValue = setmetatable({'ConstrainedValue', 'MaxValue', 'MinValue', 'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataMember = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ReflectionMetadataItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AnalysticsSettings = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GenericSettings(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HopperBin = setmetatable({'Active', 'BinType'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BackpackItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RuntimeScriptService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HttpService = setmetatable({'HttpEnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BrickColorValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FlyweightService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RodConstraint = setmetatable({'CurrentDistance', 'Length', 'Thickness'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); MotorFeature = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Feature(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); EqualizerSoundEffect = setmetatable({'HighGain', 'LowGain', 'MidGain'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Model = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PVInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BinaryStringValue = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); VRService = setmetatable({'GuiInputUserCFrame', 'VRDeviceName', 'VREnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Snap = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyAngularVelocity = setmetatable({'AngularVelocity', 'MaxTorque', 'P'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); VelocityMotor = setmetatable({'CurrentAngle', 'DesiredAngle', 'MaxVelocity'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UserInputService = setmetatable({'AccelerometerEnabled', 'BottomBarSize', 'GamepadEnabled', 'GazeSelectionEnabled', 'GyroscopeEnabled', 'KeyboardEnabled', 'LegacyInputEventsEnabled', 'ModalEnabled', 'MouseBehavior', 'MouseDeltaSensitivity', 'MouseEnabled', 'MouseIconEnabled', 'NavBarSize', 'OnScreenKeyboardAnimationDuration', 'OnScreenKeyboardPosition', 'OnScreenKeyboardSize', 'OnScreenKeyboardVisible', 'OverrideMouseIconBehavior', 'StatusBarSize', 'TouchEnabled', 'UserHeadCFrame', 'VREnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			SurfaceSelection = setmetatable({'TargetSurface'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PartAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UserGameSettings = setmetatable({'AllTutorialsDisabled', 'CameraMode', 'CameraYInverted', 'ChatVisible', 'ComputerCameraMovementMode', 'ComputerMovementMode', 'ControlMode', 'Fullscreen', 'GamepadCameraSensitivity', 'HasEverUsedVR', 'IsUsingCameraYInverted', 'IsUsingGamepadCameraSensitivity', 'MasterVolume', 'MicroProfilerWebServerEnabled', 'MicroProfilerWebServerIP', 'MicroProfilerWebServerPort', 'MouseSensitivity', 'MouseSensitivityFirstPerson', 'MouseSensitivityThirdPerson', 'OnScreenProfilerEnabled', 'OnboardingsCompleted', 'PerformanceStatsVisible', 'RotationType', 'SavedQualityLevel', 'TouchCameraMovementMode', 'TouchMovementMode', 'UsedCoreGuiIsVisibleToggle', 'UsedCustomGuiIsVisibleToggle', 'UsedHideHudShortcut', 'VREnabled', 'VRRotationIntensity'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Part = setmetatable({'Shape'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.FormFactorPart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FriendPages = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Pages(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StarterPack = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StandardPages = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Pages(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SoundService = setmetatable({'AmbientReverb', 'DistanceFactor', 'DopplerScale', 'RespectFilteringEnabled', 'RolloffScale'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UITableLayout = setmetatable({'FillEmptySpaceColumns', 'FillEmptySpaceRows', 'MajorAxis', 'Padding'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIGridStyleLayout(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); KeyboardService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DataStorePages = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Pages(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DynamicRotate = setmetatable({'BaseAngle'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UISizeConstraint = setmetatable({'MaxSize', 'MinSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIConstraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ArcHandles = setmetatable({'Axes'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandlesBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LoginService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Players = setmetatable({'BubbleChat', 'CharacterAutoLoads', 'ClassicChat', 'MaxPlayers', 'MaxPlayersInternal', 'NumPlayers', 'PreferredPlayers', 'PreferredPlayersInternal'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIAspectRatioConstraint = setmetatable({'AspectRatio', 'AspectType', 'DominantAxis'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIConstraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIConstraint = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIComponent(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BaseScript = setmetatable({'Disabled', 'LinkedSource'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.LuaSourceContainer(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIComponent = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			ClusterPacketCache = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			VehicleController = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Controller(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RayValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RotateP = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.DynamicRotate(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Camera = setmetatable({'CFrame', 'CameraType', 'CoordinateFrame', 'FieldOfView', 'Focus', 'HeadLocked', 'HeadScale', 'NearPlaneZ', 'ViewportSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TweenService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FlagStandService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyForce = setmetatable({'Force'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIPageLayout = setmetatable({'Animated', 'Circular', 'EasingDirection', 'EasingStyle', 'GamepadInputEnabled', 'Padding', 'ScrollWheelInputEnabled', 'TouchInputEnabled', 'TweenTime'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIGridStyleLayout(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PartOperationAsset = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ModuleScript = setmetatable({'LinkedSource', 'Source'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.LuaSourceContainer(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			Motor6D = setmetatable({'Transform'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Motor(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TouchInputService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UIPadding = setmetatable({'PaddingBottom', 'PaddingLeft', 'PaddingRight', 'PaddingTop'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIComponent(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BasePart = setmetatable({'Anchored', 'BackParamA', 'BackParamB', 'BackSurface', 'BackSurfaceInput', 'BottomParamA', 'BottomParamB', 'BottomSurface', 'BottomSurfaceInput', 'BrickColor', 'CFrame', 'CanCollide', 'CenterOfMass', 'CollisionGroupId', 'Color', 'CustomPhysicalProperties', 'Elasticity', 'Friction', 'FrontParamA', 'FrontParamB', 'FrontSurface', 'FrontSurfaceInput', 'LeftParamA', 'LeftParamB', 'LeftSurface', 'LeftSurfaceInput', 'LocalTransparencyModifier', 'Locked', 'Material', 'Orientation', 'Position', 'ReceiveAge', 'Reflectance', 'ResizeIncrement', 'ResizeableFaces', 'RightParamA', 'RightParamB', 'RightSurface', 'RightSurfaceInput', 'RotVelocity', 'Rotation', 'Size', 'SpecificGravity', 'TopParamA', 'TopParamB', 'TopSurface', 'TopSurfaceInput', 'Transparency', 'Velocity'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PVInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Explosion = setmetatable({'BlastPressure', 'BlastRadius', 'DestroyJointRadiusPercent', 'ExplosionType', 'Position', 'Visible'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TextFilterResult = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TestService = setmetatable({'AutoRuns', 'Description', 'ErrorCount', 'ExecuteWithStudioRun', 'Is30FpsThrottleEnabled', 'IsPhysicsEnvironmentalThrottled', 'IsSleepAllowed', 'NumberOfPlayers', 'SimulateSecondsLag', 'TestCount', 'Timeout', 'WarnCount'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PartAdornment = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase3d(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TerrainRegion = setmetatable({'IsSmooth', 'SizeInCells'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DataStoreService = setmetatable({'AutomaticRetry', 'LegacyNamingScheme'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TeleportService = setmetatable({'CustomizedTeleportUI'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ClientReplicator = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.NetworkReplicator(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TextButton = setmetatable({'Font', 'FontSize', 'LineHeight', 'LocalizedText', 'Text', 'TextBounds', 'TextColor', 'TextColor3', 'TextFits', 'TextScaled', 'TextSize', 'TextStrokeColor3', 'TextStrokeTransparency', 'TextTransparency', 'TextTruncate', 'TextWrap', 'TextWrapped', 'TextXAlignment', 'TextYAlignment'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiButton(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Teams = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Sound = setmetatable({'EmitterSize', 'IsLoaded', 'IsPaused', 'IsPlaying', 'Looped', 'MaxDistance', 'MinDistance', 'Pitch', 'PlayOnRemove', 'PlaybackLoudness', 'PlaybackSpeed', 'Playing', 'RollOffMode', 'SoundId', 'TimeLength', 'TimePosition', 'Volume'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			TaskScheduler = setmetatable({'SchedulerDutyCycle', 'SchedulerRate', 'ThreadPoolConfig', 'ThreadPoolSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			RunningAverageTimeIntervalItem = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.StatsItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RunningAverageItemInt = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.StatsItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StatsItem = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Stats = setmetatable({'ContactsCount', 'DataReceiveKbps', 'DataSendKbps', 'HeartbeatTimeMs', 'InstanceCount', 'MovingPrimitivesCount', 'PhysicsReceiveKbps', 'PhysicsSendKbps', 'PhysicsStepTimeMs', 'PrimitivesCount'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StarterCharacterScripts = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.StarterPlayerScripts(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ScriptContext = setmetatable({'ScriptsDisabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SpawnLocation = setmetatable({'AllowTeamChangeOnTouch', 'Duration', 'Enabled', 'Neutral', 'TeamColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Part(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyPosition = setmetatable({'D', 'MaxForce', 'P', 'Position'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StarterPlayerScripts = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StarterPlayer = setmetatable({'AllowCustomAnimations', 'AutoJumpEnabled', 'CameraMaxZoomDistance', 'CameraMinZoomDistance', 'CameraMode', 'DevCameraOcclusionMode', 'DevComputerCameraMovementMode', 'DevComputerMovementMode', 'DevTouchCameraMovementMode', 'DevTouchMovementMode', 'EnableMouseLockOption', 'HealthDisplayDistance', 'LoadCharacterAppearance', 'NameDisplayDistance'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ScreenGui = setmetatable({'DisplayOrder', 'IgnoreGuiInset', 'OnTopOfCoreBlur'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.LayerCollector(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); StarterGear = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataYieldFunctions = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SpawnerService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Sparkles = setmetatable({'Color', 'Enabled', 'SparkleColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Dialog = setmetatable({'BehaviorType', 'ConversationDistance', 'GoodbyeChoiceActive', 'GoodbyeDialog', 'InUse', 'InitialPrompt', 'Purpose', 'Tone', 'TriggerDistance', 'TriggerOffset'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ThirdPartyUserService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CacheableContentProvider = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ForceField = setmetatable({'Visible'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TremoloSoundEffect = setmetatable({'Depth', 'Duty', 'Frequency'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReverbSoundEffect = setmetatable({'DecayTime', 'Density', 'Diffusion', 'DryLevel', 'WetLevel'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ControllerService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PitchShiftSoundEffect = setmetatable({'Octave'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); EchoSoundEffect = setmetatable({'Delay', 'DryLevel', 'Feedback', 'WetLevel'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DistortionSoundEffect = setmetatable({'Level'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			Dragger = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Animation = setmetatable({'AnimationId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SoundEffect = setmetatable({'Enabled', 'Priority'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PathfindingService = setmetatable({'EmptyCutoff'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PostEffect = setmetatable({'Enabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Color3Value = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GenericSettings = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ServiceProvider(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ManualGlue = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ManualSurfaceJointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Platform = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Part(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DataModel = setmetatable({'CreatorId', 'CreatorType', 'GameId', 'GearGenreSetting', 'Genre', 'IsSFFlagsLoaded', 'JobId', 'PlaceId', 'PlaceVersion', 'VIPServerId', 'VIPServerOwnerId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ServiceProvider(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ServiceProvider = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Seat = setmetatable({'Disabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Part(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LineForce = setmetatable({'ApplyAtCenterOfMass', 'InverseSquareLaw', 'Magnitude', 'MaxForce', 'ReactionForceEnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ScriptDebugger = setmetatable({'CurrentLine', 'IsDebugging', 'IsPaused'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RunService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReplicatedStorage = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PlayerGui = setmetatable({'CurrentScreenOrientation', 'ScreenOrientation'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePlayerGui(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RemoteFunction = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataProperties = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataEnumItem = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ReflectionMetadataItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Debris = setmetatable({'MaxItems'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataClass = setmetatable({'ExplorerImageIndex', 'ExplorerOrder', 'Insertable', 'PreferredParent', 'PreferredParents'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ReflectionMetadataItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			ReflectionMetadataItem = setmetatable({'Browsable', 'ClassCategory', 'Constraint', 'Deprecated', 'EditingDisabled', 'IsBackend', 'ScriptContext', 'UIMaximum', 'UIMinimum', 'UINumTicks'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GoogleAnalyticsConfiguration = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataFunctions = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NetworkClient = setmetatable({'Ticket'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.NetworkPeer(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ParticleEmitter = setmetatable({'Acceleration', 'Color', 'Drag', 'EmissionDirection', 'Enabled', 'Lifetime', 'LightEmission', 'LightInfluence', 'LockedToPart', 'Rate', 'RotSpeed', 'Rotation', 'Size', 'Speed', 'SpreadAngle', 'Texture', 'Transparency', 'VelocityInheritance', 'VelocitySpread', 'ZOffset'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			Flag = setmetatable({'TeamColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Tool(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NonReplicatedCSGDictionaryService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.FlyweightService(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ReflectionMetadataEnums = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BlurEffect = setmetatable({'Size'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PostEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); HttpRbxApiService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SphereHandleAdornment = setmetatable({'Radius'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandleAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UserSettings = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GenericSettings(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PluginManager = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Button = setmetatable({'ClickableWhenViewportHidden', 'Enabled', 'Icon'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PluginAction = setmetatable({'ActionId', 'StatusTip', 'Text'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NetworkServer = setmetatable({'Port'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.NetworkPeer(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Backpack = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Plugin = setmetatable({'CollisionEnabled', 'GridSize'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PhysicsService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NetworkMarker = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CustomEventReceiver = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PlayerScripts = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BasePlayerGui = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ParabolaAdornment = setmetatable({'A', 'B', 'C', 'Range', 'Thickness'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PVAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BadgeService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BevelMesh = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.DataModelMesh(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Trail = setmetatable({'Color', 'Enabled', 'FaceCamera', 'Lifetime', 'LightEmission', 'LightInfluence', 'MaxLength', 'MinLength', 'Texture', 'TextureLength', 'TextureMode', 'Transparency', 'WidthScale'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Sky = setmetatable({'CelestialBodiesShown', 'MoonAngularSize', 'MoonTextureId', 'SkyboxBk', 'SkyboxDn', 'SkyboxFt', 'SkyboxLf', 'SkyboxRt', 'SkyboxUp', 'StarCount', 'SunAngularSize', 'SunTextureId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UnionOperation = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PartOperation(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); DockWidgetPluginGui = setmetatable({'HostWidgetWasRestored'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PluginGui(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiService = setmetatable({'AutoSelectGuiEnabled', 'CoreGuiNavigationEnabled', 'GuiNavigationEnabled', 'IsModalDialog', 'IsWindows', 'MenuIsOpen'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BallSocketConstraint = setmetatable({'LimitsEnabled', 'Radius', 'Restitution', 'TwistLimitsEnabled', 'TwistLowerAngle', 'TwistUpperAngle', 'UpperAngle'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NetworkSettings = setmetatable({'ArePhysicsRejectionsReported', 'ClientPhysicsSendRate', 'DataGCRate', 'DataMtuAdjust', 'DataSendPriority', 'DataSendRate', 'ExtraMemoryUsed', 'FreeMemoryMBytes', 'IncommingReplicationLag', 'IsQueueErrorComputed', 'NetworkOwnerRate', 'PhysicsMtuAdjust', 'PhysicsSendPriority', 'PhysicsSendRate', 'PreferredClientPort', 'PrintBits', 'PrintEvents', 'PrintFilters', 'PrintInstances', 'PrintPhysicsErrors', 'PrintProperties', 'PrintSplitMessage', 'PrintStreamInstanceQuota', 'PrintTouches', 'ReceiveRate', 'RenderStreamedRegions', 'ShowActiveAnimationAsset', 'TouchSendRate', 'TrackDataTypes', 'TrackPhysicsDetails', 'UseInstancePacketCache', 'UsePhysicsPacketCache'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Translator = setmetatable({'LocaleId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); UILayout = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.UIComponent(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PackageLink = setmetatable({'PackageId', 'VersionId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			AnimationController = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GroupService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); AlignOrientation = setmetatable({'MaxAngularVelocity', 'MaxTorque', 'PrimaryAxisOnly', 'ReactionTorqueEnabled', 'Responsiveness', 'RigidityEnabled'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BlockMesh = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BevelMesh(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Chat = setmetatable({'LoadDefaultChat'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SurfaceGui = setmetatable({'Active', 'AlwaysOnTop', 'CanvasSize', 'ClipsDescendants', 'Face', 'LightInfluence', 'ToolPunchThroughDistance', 'ZOffset'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.LayerCollector(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Selection = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Workspace = setmetatable({'AllowThirdPartySales', 'DistributedGameTime', 'FallenPartsDestroyHeight', 'FilteringEnabled', 'Gravity', 'StreamingEnabled', 'TemporaryLegacyPhysicsSolverOverride'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Model(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Pants = setmetatable({'PantsTemplate'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Clothing(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SelectionSphere = setmetatable({'SurfaceColor', 'SurfaceColor3', 'SurfaceTransparency'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PVAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GamepadService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TrussPart = setmetatable({'Style'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ServerReplicator = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.NetworkReplicator(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CompressorSoundEffect = setmetatable({'Attack', 'GainMakeup', 'Ratio', 'Release', 'Threshold'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SoundEffect(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); FlagStand = setmetatable({'TeamColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Part(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PartOperation = setmetatable({'TriangleCount', 'UsePartColor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Hat = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Accoutrement(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BindableEvent = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SelectionPartLasso = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SelectionLasso(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			FormFactorPart = setmetatable({'FormFactor'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PrismaticConstraint = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.SlidingBallConstraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CornerWedgePart = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BasePart(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); TouchTransmitter = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); InventoryPages = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Pages(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Hint = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Message(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SpringConstraint = setmetatable({'Coils', 'CurrentLength', 'Damping', 'FreeLength', 'LimitsEnabled', 'MaxForce', 'MaxLength', 'MinLength', 'Radius', 'Stiffness', 'Thickness'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Constraint(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Fire = setmetatable({'Color', 'Enabled', 'Heat', 'SecondaryColor', 'Size'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); NetworkReplicator = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyThrust = setmetatable({'Force', 'Location'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Tween = setmetatable({'TweenInfo'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.TweenBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LuaWebService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LocalScript = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Script(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LuaSourceContainer = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LuaSettings = setmetatable({'AreScriptStartsReported', 'DefaultWaitTime', 'GcFrequency', 'GcLimit', 'GcPause', 'GcStepMul', 'WaitingThreadsBudget'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CoreScript = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BaseScript(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CylinderMesh = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BevelMesh(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ConeHandleAdornment = setmetatable({'Height', 'Radius'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.HandleAdornment(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); LocalizationService = setmetatable({'ForcePlayModeGameLocaleId', 'ForcePlayModeRobloxLocaleId', 'IsTextScraperRunning', 'RobloxForcePlayModeGameLocaleId', 'RobloxForcePlayModeRobloxLocaleId', 'RobloxLocaleId', 'SystemLocaleId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); CustomEvent = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Weld = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); QWidgetPluginGui = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.PluginGui(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BoolValue = setmetatable({'Value'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.ValueBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); 
			TextService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Pages = setmetatable({'IsFinished'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Beam = setmetatable({'Color', 'CurveSize0', 'CurveSize1', 'Enabled', 'FaceCamera', 'LightEmission', 'LightInfluence', 'Segments', 'Texture', 'TextureLength', 'TextureMode', 'TextureSpeed', 'Transparency', 'Width0', 'Width1', 'ZOffset'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiItem = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ChangeHistoryService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ClickDetector = setmetatable({'CursorIcon', 'MaxActivationDistance'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); PluginGui = setmetatable({'Title'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.LayerCollector(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Instance = setmetatable({'Archivable', 'ClassName', 'DataCost', 'Name', 'RobloxLocked'},{__call = function(me) return me end}); Hopper = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BackpackItem = setmetatable({'TextureId'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiItem(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Frame = setmetatable({'Style'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiObject(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); SurfaceLight = setmetatable({'Angle', 'Face', 'Range'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Light(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Decal = setmetatable({'Color3', 'LocalTransparencyModifier', 'Shiny', 'Specular', 'Texture', 'Transparency'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.FaceInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); RotateV = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.DynamicRotate(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); ContextActionService = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); GuiBase3d = setmetatable({'Color', 'Color3', 'Transparency', 'Visible'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.GuiBase(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Rotate = setmetatable({},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.JointInstance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); BodyVelocity = setmetatable({'MaxForce', 'P', 'Velocity'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.BodyMover(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end}); Keyframe = setmetatable({'Time'},{AllProps = {},__call = function(me, all) local meta = getmetatable(me) local p = meta.AllProps if all then if not next(p) then for i,v in next, self.Instance(true) do table.insert(p,v) end for i,v in next, me do table.insert(p,v) end end return p end return me end});
		} do gelf.__index[i] = v if i == index then ret = v end end return ret end});
		__index = function(self,index)
			local gelf, ret = getmetatable(self)
			gelf.__index = {}
			for i,v in next, {
				sort = function(self,func)
					table.sort(self,func)
				end;
				search = function(hmm, index, keepSimilar)
					return Spice.Table.search(type(hmm) == 'string' and getmetatable(self).FullAPI[hmm](true) or self,index,false,keepSimilar, true, false,true)
				end;
			} do
				gelf.__index[i] = v
				if i == index then ret = v end
			end
			return ret
		end;
	});
},{
		__index = function(self,index)
			local gelf, ret = getmetatable(self)
			gelf.__index = {}
			for i,v in next, {
				new = self.Custom.new;
				hasProperty = function(Object,Property)
					local has = pcall(function() return Object[Property] and true end)
					return has, has and Object[Property] or nil
				end;
				getProperties = function(Object, full)
					local props = {}
					local op = getmetatable(self.RobloxAPI).FullAPI
					for _, prop in next, op[Object.ClassName](full) do
						props[prop] = Object[prop]
					end
					return props
				end;
				getChildrenOfProperty = function(Object, Property, Value)
					local children = {}
					for i,child in next, Object:GetChildren() do
						if pcall(function() return child[Property] and true end) then
							if Value and child[Property] == Value then
								table.insert(children,child)
							end
						end
					end
					return children
				end;
				getDescendantsOfProperty = function(Object, Property, Value)
					local descendants = {}
					for i,desc in next, Object:GetDescendants() do
						if pcall(function() return desc[Property] and true end) then
							if Value and desc[Property] == Value then
								table.insert(descendants,desc)
							end
						end
					end
					return descendants
				end;
				setProperties = function(Object, Properties, dontIncludeShorts, dontIncludeCustom, includeDefault)
					local custom, api, default = self.Custom, self.RobloxAPI, self.Default
					if includeDefault then
						self.Default.toDefaultProperties(Object,type(includeDefault) == 'number' or nil)
					end
					for property, value in next, Properties do
						if not dontIncludeShorts then property = self.RobloxAPI.search(Object.ClassName, property) or property end
						if not dontIncludeCustom and self.Custom[property] then
							self.Custom[property](Object,type(value) == 'table' and unpack(value) or value)
						elseif pcall(function() return Object[property] and true end) then
							Object[property] = value
						end
					end
					return Object
				end;
				setVanillaProperties = function(Object, Properties)
					for i,v in next, Properties do
						Object[i] = v
					end
				end;
			} do
				gelf.__index[i] = v
				if i == index then ret = v end
			end
			return ret
		end;	
});
